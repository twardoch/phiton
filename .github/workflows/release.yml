name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    name: Run Tests
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install test dependencies
        run: |
          uv sync

      - name: Run tests with Pytest
        run: uv run pytest -n auto --maxfail=1 --disable-warnings tests/

  build-distribution:
    name: Build Python Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-distributions
          path: dist/

  build-binaries:
    name: Build Binaries
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install dependencies including PyInstaller
        run: |
          uv sync
          uv add pyinstaller

      - name: Build binary with PyInstaller
        run: |
          uv run pyinstaller --onefile --name phiton-${{ matrix.os }} --add-data "src/phiton:phiton" src/phiton/__main__.py
        shell: bash

      - name: Test binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          ./dist/phiton-${{ matrix.os }} --version

      - name: Test binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./dist/phiton-${{ matrix.os }}.exe --version

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: phiton-binary-${{ matrix.os }}
          path: dist/phiton-${{ matrix.os }}*

  release:
    name: Create Release
    needs: [build-distribution, build-binaries]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/phiton
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize artifacts
        run: |
          mkdir -p release-assets
          cp -r artifacts/python-distributions/* release-assets/ || true
          cp -r artifacts/phiton-binary-*/* release-assets/ || true
          ls -la release-assets/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages-dir: artifacts/python-distributions/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
          body: |
            ## Installation

            ### Using pip/uv
            ```bash
            pip install phiton
            # or
            uv pip install phiton
            ```

            ### Using precompiled binaries
            Download the appropriate binary for your platform from the assets below:
            - `phiton-ubuntu-latest` - Linux binary
            - `phiton-windows-latest.exe` - Windows binary  
            - `phiton-macos-latest` - macOS binary

            Make the binary executable and run:
            ```bash
            chmod +x phiton-ubuntu-latest  # Linux/macOS only
            ./phiton-ubuntu-latest --help
            ```

            ## Changes in this release
            See the automatically generated release notes below.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 