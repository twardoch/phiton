"\n    Document360 Customer API\n\n    Document360 RESTful APIs will allow you to integrate your documentation with your software, allowing you to easily onboard new users, manage your articles and more.   You can find detailed API documentation here : [API Documentation](https://apidocs.document360.io/docs)\n\n    The version of the OpenAPI document: 2.0\n    Contact: support@document360.com\n    Generated by OpenAPI Generator (https://openapi-generator.tech)\n\n    Do not edit the class manually.\n"

_p = "/v2/Articles/{articleId}/settings"
_o = "description"
_n = "/v2/Articles/{articleId}/{langCode}/settings"
_m = "/v2/Articles/{articleId}/{langCode}"
_l = "BulkUpdateArticleResponse"
_k = "BulkDeleteArticleResponse"
_j = "BulkDeleteArticleVersionResonse"
_i = "BulkCreateArticleResponseCustomer"
_h = "GET /v2/Articles/{articleId}/versions/{versionNumber} is deprecated."
_g = "GET /v2/Articles/{articleId}/versions is deprecated."
_f = "DELETE /v2/Articles/{articleId}/version/{versionNumber} is deprecated."
_e = "PUT /v2/Articles/{articleId}/updateDescription is deprecated."
_d = "PUT /v2/Articles/{articleId}/settings is deprecated."
_c = "GET /v2/Articles/{articleId}/settings is deprecated."
_b = "POST /v2/Articles/{articleId}/publish is deprecated."
_a = "appendSASToken"
_Z = "isForDisplay"
_Y = "GetArticleResponseCustomer"
_X = "ForkArticleVersionResponse"
_W = "versionNumber"
_V = "POST"
_U = "DELETE"
_T = "GetArticleVersionResponse"
_S = "GetArticleVersionsResponse"
_R = "UpdateArticleSettingsResponseCustomer"
_Q = "GetArticleSettingsResponse"
_P = "GET"
_O = "PUT"
_N = "application/*+json"
_M = "text/json"
_L = "application/json-patch+json"
_K = "langCode"
_J = "CreateArticleResponse"
_I = "articleId"
_H = "Content-Type"
_G = "api_token"
_F = "application/json"
_E = "Accept"
_D = "400"
_C = "200"
_B = "CustomerApiBaseResponse"
_A = None
import warnings

from d361api.api_client import ApiClient
from pydantic import validate_call


class ArticlesApi:
    "NOTE: This class is auto generated by OpenAPI Generator\n    Ref: https://openapi-generator.tech\n\n    Do not edit the class manually.\n"

    def __init__(B, api_client=_A):
        A = api_client
        if A is _A:
            A = ApiClient.get_default()
        B.api_client = A

    @validate_call
    async def v2_articles_article_id_delete(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes an article with an ID\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_delete_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_delete_with_http_info(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes an article with an ID\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_delete_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_delete_without_preload_content(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes an article with an ID\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_delete_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _B, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_delete_serialize(
        B, article_id, _request_auth, _content_type, _headers, _host_index
    ):
        C = article_id
        E = _A
        F = {}
        D = {}
        G = []
        A = _headers or {}
        H = []
        I = {}
        J = _A
        if C is not _A:
            D[_I] = C
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        K = [_G]
        return B.api_client.param_serialize(
            method=_U,
            resource_path="/v2/Articles/{articleId}",
            path_params=D,
            query_params=G,
            header_params=A,
            body=J,
            post_params=H,
            files=I,
            auth_settings=K,
            collection_formats=F,
            _host=E,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_fork_put(
        self,
        article_id,
        fork_article_version_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Forks an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param fork_article_version_request: \n        :type fork_article_version_request: ForkArticleVersionRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_fork_put_serialize(
            article_id=article_id,
            fork_article_version_request=fork_article_version_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _X, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_fork_put_with_http_info(
        self,
        article_id,
        fork_article_version_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Forks an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param fork_article_version_request: \n        :type fork_article_version_request: ForkArticleVersionRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_fork_put_serialize(
            article_id=article_id,
            fork_article_version_request=fork_article_version_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _X, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_fork_put_without_preload_content(
        self,
        article_id,
        fork_article_version_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Forks an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param fork_article_version_request: \n        :type fork_article_version_request: ForkArticleVersionRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_fork_put_serialize(
            article_id=article_id,
            fork_article_version_request=fork_article_version_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _X, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_fork_put_serialize(
        B,
        article_id,
        fork_article_version_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        E = _content_type
        D = fork_article_version_request
        C = article_id
        I = _A
        J = {}
        F = {}
        K = []
        A = _headers or {}
        L = []
        M = {}
        G = _A
        if C is not _A:
            F[_I] = C
        if D is not _A:
            G = D
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if E:
            A[_H] = E
        else:
            H = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if H is not _A:
                A[_H] = H
        N = [_G]
        return B.api_client.param_serialize(
            method=_O,
            resource_path="/v2/Articles/{articleId}/fork",
            path_params=F,
            query_params=K,
            header_params=A,
            body=G,
            post_params=L,
            files=M,
            auth_settings=N,
            collection_formats=J,
            _host=I,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_get(
        self,
        article_id,
        lang_code,
        is_for_display=_A,
        is_published=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets an article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param is_published: **true** : You will get the latest published version of the article. (If there are no published versions, then it will return the latest version)              **false** : To get the the latest version of the article\n        :type is_published: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            is_for_display=is_for_display,
            is_published=is_published,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _Y, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_get_with_http_info(
        self,
        article_id,
        lang_code,
        is_for_display=_A,
        is_published=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets an article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param is_published: **true** : You will get the latest published version of the article. (If there are no published versions, then it will return the latest version)              **false** : To get the the latest version of the article\n        :type is_published: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            is_for_display=is_for_display,
            is_published=is_published,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _Y, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_get_without_preload_content(
        self,
        article_id,
        lang_code,
        is_for_display=_A,
        is_published=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets an article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param is_published: **true** : You will get the latest published version of the article. (If there are no published versions, then it will return the latest version)              **false** : To get the the latest version of the article\n        :type is_published: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            is_for_display=is_for_display,
            is_published=is_published,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _Y, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_get_serialize(
        D,
        article_id,
        lang_code,
        is_for_display,
        is_published,
        append_sas_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        I = append_sas_token
        H = is_published
        G = is_for_display
        F = lang_code
        E = article_id
        J = _A
        K = {}
        B = {}
        A = []
        C = _headers or {}
        L = []
        M = {}
        N = _A
        if E is not _A:
            B[_I] = E
        if F is not _A:
            B[_K] = F
        if G is not _A:
            A.append((_Z, G))
        if H is not _A:
            A.append(("isPublished", H))
        if I is not _A:
            A.append((_a, I))
        if _E not in C:
            C[_E] = D.api_client.select_header_accept([_F])
        O = [_G]
        return D.api_client.param_serialize(
            method=_P,
            resource_path=_m,
            path_params=B,
            query_params=A,
            header_params=C,
            body=N,
            post_params=L,
            files=M,
            auth_settings=O,
            collection_formats=K,
            _host=J,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_publish_post(
        self,
        article_id,
        lang_code,
        publish_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Publishes an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param publish_article_request: \n        :type publish_article_request: PublishArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_publish_post_serialize(
            article_id=article_id,
            lang_code=lang_code,
            publish_article_request=publish_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_publish_post_with_http_info(
        self,
        article_id,
        lang_code,
        publish_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Publishes an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param publish_article_request: \n        :type publish_article_request: PublishArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_publish_post_serialize(
            article_id=article_id,
            lang_code=lang_code,
            publish_article_request=publish_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_publish_post_without_preload_content(
        self,
        article_id,
        lang_code,
        publish_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Publishes an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param publish_article_request: \n        :type publish_article_request: PublishArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_publish_post_serialize(
            article_id=article_id,
            lang_code=lang_code,
            publish_article_request=publish_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _J, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_publish_post_serialize(
        B,
        article_id,
        lang_code,
        publish_article_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        G = _content_type
        F = publish_article_request
        E = lang_code
        D = article_id
        J = _A
        K = {}
        C = {}
        L = []
        A = _headers or {}
        M = []
        N = {}
        H = _A
        if D is not _A:
            C[_I] = D
        if E is not _A:
            C[_K] = E
        if F is not _A:
            H = F
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if G:
            A[_H] = G
        else:
            I = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if I is not _A:
                A[_H] = I
        O = [_G]
        return B.api_client.param_serialize(
            method=_V,
            resource_path="/v2/Articles/{articleId}/{langCode}/publish",
            path_params=C,
            query_params=L,
            header_params=A,
            body=H,
            post_params=M,
            files=N,
            auth_settings=O,
            collection_formats=K,
            _host=J,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_put(
        self,
        article_id,
        lang_code,
        update_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates an article with the ID\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param update_article_request: \n        :type update_article_request: UpdateArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            update_article_request=update_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_put_with_http_info(
        self,
        article_id,
        lang_code,
        update_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates an article with the ID\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param update_article_request: \n        :type update_article_request: UpdateArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            update_article_request=update_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_put_without_preload_content(
        self,
        article_id,
        lang_code,
        update_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates an article with the ID\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param update_article_request: \n        :type update_article_request: UpdateArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            update_article_request=update_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _J, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_put_serialize(
        B,
        article_id,
        lang_code,
        update_article_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        G = _content_type
        F = update_article_request
        E = lang_code
        D = article_id
        J = _A
        K = {}
        C = {}
        L = []
        A = _headers or {}
        M = []
        N = {}
        H = _A
        if D is not _A:
            C[_I] = D
        if E is not _A:
            C[_K] = E
        if F is not _A:
            H = F
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if G:
            A[_H] = G
        else:
            I = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if I is not _A:
                A[_H] = I
        O = [_G]
        return B.api_client.param_serialize(
            method=_O,
            resource_path=_m,
            path_params=C,
            query_params=L,
            header_params=A,
            body=H,
            post_params=M,
            files=N,
            auth_settings=O,
            collection_formats=K,
            _host=J,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_settings_get(
        self,
        article_id,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_settings_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _Q, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_settings_get_with_http_info(
        self,
        article_id,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_settings_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _Q, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_settings_get_without_preload_content(
        self,
        article_id,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_settings_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _Q, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_settings_get_serialize(
        C, article_id, lang_code, _request_auth, _content_type, _headers, _host_index
    ):
        E = lang_code
        D = article_id
        F = _A
        G = {}
        A = {}
        H = []
        B = _headers or {}
        I = []
        J = {}
        K = _A
        if D is not _A:
            A[_I] = D
        if E is not _A:
            A[_K] = E
        if _E not in B:
            B[_E] = C.api_client.select_header_accept([_F])
        L = [_G]
        return C.api_client.param_serialize(
            method=_P,
            resource_path=_n,
            path_params=A,
            query_params=H,
            header_params=B,
            body=K,
            post_params=I,
            files=J,
            auth_settings=L,
            collection_formats=G,
            _host=F,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_settings_put(
        self,
        article_id,
        lang_code,
        update_article_settings_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param update_article_settings_request: \n        :type update_article_settings_request: UpdateArticleSettingsRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_settings_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            update_article_settings_request=update_article_settings_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _R, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_settings_put_with_http_info(
        self,
        article_id,
        lang_code,
        update_article_settings_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param update_article_settings_request: \n        :type update_article_settings_request: UpdateArticleSettingsRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_settings_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            update_article_settings_request=update_article_settings_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _R, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_settings_put_without_preload_content(
        self,
        article_id,
        lang_code,
        update_article_settings_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param update_article_settings_request: \n        :type update_article_settings_request: UpdateArticleSettingsRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_settings_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            update_article_settings_request=update_article_settings_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _R, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_settings_put_serialize(
        B,
        article_id,
        lang_code,
        update_article_settings_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        G = _content_type
        F = update_article_settings_request
        E = lang_code
        D = article_id
        J = _A
        K = {}
        C = {}
        L = []
        A = _headers or {}
        M = []
        N = {}
        H = _A
        if D is not _A:
            C[_I] = D
        if E is not _A:
            C[_K] = E
        if F is not _A:
            H = F
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if G:
            A[_H] = G
        else:
            I = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if I is not _A:
                A[_H] = I
        O = [_G]
        return B.api_client.param_serialize(
            method=_O,
            resource_path=_n,
            path_params=C,
            query_params=L,
            header_params=A,
            body=H,
            post_params=M,
            files=N,
            auth_settings=O,
            collection_formats=K,
            _host=J,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_update_description_put(
        self,
        article_id,
        lang_code,
        description=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Update the Article Description\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param description: The description of the article\n        :type description: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_update_description_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_update_description_put_with_http_info(
        self,
        article_id,
        lang_code,
        description=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Update the Article Description\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param description: The description of the article\n        :type description: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_update_description_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_update_description_put_without_preload_content(
        self,
        article_id,
        lang_code,
        description=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Update the Article Description\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param description: The description of the article\n        :type description: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_update_description_put_serialize(
            article_id=article_id,
            lang_code=lang_code,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _B, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_update_description_put_serialize(
        C,
        article_id,
        lang_code,
        description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        F = description
        E = lang_code
        D = article_id
        H = _A
        I = {}
        A = {}
        G = []
        B = _headers or {}
        J = []
        K = {}
        L = _A
        if D is not _A:
            A[_I] = D
        if E is not _A:
            A[_K] = E
        if F is not _A:
            G.append((_o, F))
        if _E not in B:
            B[_E] = C.api_client.select_header_accept([_F])
        M = [_G]
        return C.api_client.param_serialize(
            method=_O,
            resource_path="/v2/Articles/{articleId}/{langCode}/updateDescription",
            path_params=A,
            query_params=G,
            header_params=B,
            body=L,
            post_params=J,
            files=K,
            auth_settings=M,
            collection_formats=I,
            _host=H,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_version_version_number_delete(
        self,
        article_id,
        version_number,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes an article version\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_version_version_number_delete_serialize(
            article_id=article_id,
            version_number=version_number,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_version_version_number_delete_with_http_info(
        self,
        article_id,
        version_number,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes an article version\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_version_version_number_delete_serialize(
            article_id=article_id,
            version_number=version_number,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_version_version_number_delete_without_preload_content(
        self,
        article_id,
        version_number,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes an article version\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_version_version_number_delete_serialize(
            article_id=article_id,
            version_number=version_number,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _B, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_version_version_number_delete_serialize(
        C,
        article_id,
        version_number,
        lang_code,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        F = lang_code
        E = version_number
        D = article_id
        G = _A
        H = {}
        A = {}
        I = []
        B = _headers or {}
        J = []
        K = {}
        L = _A
        if D is not _A:
            A[_I] = D
        if E is not _A:
            A[_W] = E
        if F is not _A:
            A[_K] = F
        if _E not in B:
            B[_E] = C.api_client.select_header_accept([_F])
        M = [_G]
        return C.api_client.param_serialize(
            method=_U,
            resource_path="/v2/Articles/{articleId}/{langCode}/version/{versionNumber}",
            path_params=A,
            query_params=I,
            header_params=B,
            body=L,
            post_params=J,
            files=K,
            auth_settings=M,
            collection_formats=H,
            _host=G,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_versions_get(
        self,
        article_id,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets all article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_versions_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _S, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_versions_get_with_http_info(
        self,
        article_id,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets all article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_versions_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _S, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_versions_get_without_preload_content(
        self,
        article_id,
        lang_code,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets all article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: (required)\n        :type lang_code: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_versions_get_serialize(
            article_id=article_id,
            lang_code=lang_code,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _S, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_versions_get_serialize(
        C, article_id, lang_code, _request_auth, _content_type, _headers, _host_index
    ):
        E = lang_code
        D = article_id
        F = _A
        G = {}
        A = {}
        H = []
        B = _headers or {}
        I = []
        J = {}
        K = _A
        if D is not _A:
            A[_I] = D
        if E is not _A:
            A[_K] = E
        if _E not in B:
            B[_E] = C.api_client.select_header_accept([_F])
        L = [_G]
        return C.api_client.param_serialize(
            method=_P,
            resource_path="/v2/Articles/{articleId}/{langCode}/versions",
            path_params=A,
            query_params=H,
            header_params=B,
            body=K,
            post_params=I,
            files=J,
            auth_settings=L,
            collection_formats=G,
            _host=F,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_lang_code_versions_version_number_get(
        self,
        article_id,
        version_number,
        lang_code,
        is_for_display=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets article by a version number\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_versions_version_number_get_serialize(
            article_id=article_id,
            version_number=version_number,
            lang_code=lang_code,
            is_for_display=is_for_display,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _T, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_lang_code_versions_version_number_get_with_http_info(
        self,
        article_id,
        version_number,
        lang_code,
        is_for_display=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets article by a version number\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_article_id_lang_code_versions_version_number_get_serialize(
            article_id=article_id,
            version_number=version_number,
            lang_code=lang_code,
            is_for_display=is_for_display,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _T, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_lang_code_versions_version_number_get_without_preload_content(
        self,
        article_id,
        version_number,
        lang_code,
        is_for_display=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Gets article by a version number\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_article_id_lang_code_versions_version_number_get_serialize(
            article_id=article_id,
            version_number=version_number,
            lang_code=lang_code,
            is_for_display=is_for_display,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _T, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_lang_code_versions_version_number_get_serialize(
        D,
        article_id,
        version_number,
        lang_code,
        is_for_display,
        append_sas_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        I = append_sas_token
        H = is_for_display
        G = lang_code
        F = version_number
        E = article_id
        J = _A
        K = {}
        A = {}
        B = []
        C = _headers or {}
        L = []
        M = {}
        N = _A
        if E is not _A:
            A[_I] = E
        if F is not _A:
            A[_W] = F
        if G is not _A:
            A[_K] = G
        if H is not _A:
            B.append((_Z, H))
        if I is not _A:
            B.append((_a, I))
        if _E not in C:
            C[_E] = D.api_client.select_header_accept([_F])
        O = [_G]
        return D.api_client.param_serialize(
            method=_P,
            resource_path="/v2/Articles/{articleId}/{langCode}/versions/{versionNumber}",
            path_params=A,
            query_params=B,
            header_params=C,
            body=N,
            post_params=L,
            files=M,
            auth_settings=O,
            collection_formats=K,
            _host=J,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_publish_post(
        self,
        article_id,
        publish_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Publishes an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param publish_article_request: \n        :type publish_article_request: PublishArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_b, DeprecationWarning)
        C = A._v2_articles_article_id_publish_post_serialize(
            article_id=article_id,
            publish_article_request=publish_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_publish_post_with_http_info(
        self,
        article_id,
        publish_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Publishes an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param publish_article_request: \n        :type publish_article_request: PublishArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_b, DeprecationWarning)
        C = A._v2_articles_article_id_publish_post_serialize(
            article_id=article_id,
            publish_article_request=publish_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_publish_post_without_preload_content(
        self,
        article_id,
        publish_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Publishes an article with an id\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param publish_article_request: \n        :type publish_article_request: PublishArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        warnings.warn(_b, DeprecationWarning)
        A = self._v2_articles_article_id_publish_post_serialize(
            article_id=article_id,
            publish_article_request=publish_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _J, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_publish_post_serialize(
        B,
        article_id,
        publish_article_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        E = _content_type
        D = publish_article_request
        C = article_id
        I = _A
        J = {}
        F = {}
        K = []
        A = _headers or {}
        L = []
        M = {}
        G = _A
        if C is not _A:
            F[_I] = C
        if D is not _A:
            G = D
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if E:
            A[_H] = E
        else:
            H = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if H is not _A:
                A[_H] = H
        N = [_G]
        return B.api_client.param_serialize(
            method=_V,
            resource_path="/v2/Articles/{articleId}/publish",
            path_params=F,
            query_params=K,
            header_params=A,
            body=G,
            post_params=L,
            files=M,
            auth_settings=N,
            collection_formats=J,
            _host=I,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_settings_get(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_c, DeprecationWarning)
        C = A._v2_articles_article_id_settings_get_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _Q, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_settings_get_with_http_info(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_c, DeprecationWarning)
        C = A._v2_articles_article_id_settings_get_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _Q, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_settings_get_without_preload_content(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        warnings.warn(_c, DeprecationWarning)
        A = self._v2_articles_article_id_settings_get_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _Q, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_settings_get_serialize(
        B, article_id, _request_auth, _content_type, _headers, _host_index
    ):
        C = article_id
        E = _A
        F = {}
        D = {}
        G = []
        A = _headers or {}
        H = []
        I = {}
        J = _A
        if C is not _A:
            D[_I] = C
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        K = [_G]
        return B.api_client.param_serialize(
            method=_P,
            resource_path=_p,
            path_params=D,
            query_params=G,
            header_params=A,
            body=J,
            post_params=H,
            files=I,
            auth_settings=K,
            collection_formats=F,
            _host=E,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_settings_put(
        self,
        article_id,
        update_article_settings_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Updates settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param update_article_settings_request: \n        :type update_article_settings_request: UpdateArticleSettingsRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_d, DeprecationWarning)
        C = A._v2_articles_article_id_settings_put_serialize(
            article_id=article_id,
            update_article_settings_request=update_article_settings_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _R, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_settings_put_with_http_info(
        self,
        article_id,
        update_article_settings_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Updates settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param update_article_settings_request: \n        :type update_article_settings_request: UpdateArticleSettingsRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_d, DeprecationWarning)
        C = A._v2_articles_article_id_settings_put_serialize(
            article_id=article_id,
            update_article_settings_request=update_article_settings_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _R, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_settings_put_without_preload_content(
        self,
        article_id,
        update_article_settings_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Updates settings for the article\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param update_article_settings_request: \n        :type update_article_settings_request: UpdateArticleSettingsRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        warnings.warn(_d, DeprecationWarning)
        A = self._v2_articles_article_id_settings_put_serialize(
            article_id=article_id,
            update_article_settings_request=update_article_settings_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _R, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_settings_put_serialize(
        B,
        article_id,
        update_article_settings_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        E = _content_type
        D = update_article_settings_request
        C = article_id
        I = _A
        J = {}
        F = {}
        K = []
        A = _headers or {}
        L = []
        M = {}
        G = _A
        if C is not _A:
            F[_I] = C
        if D is not _A:
            G = D
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if E:
            A[_H] = E
        else:
            H = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if H is not _A:
                A[_H] = H
        N = [_G]
        return B.api_client.param_serialize(
            method=_O,
            resource_path=_p,
            path_params=F,
            query_params=K,
            header_params=A,
            body=G,
            post_params=L,
            files=M,
            auth_settings=N,
            collection_formats=J,
            _host=I,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_update_description_put(
        self,
        article_id,
        description=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Update the Article Description\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param description: The description of the article\n        :type description: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_e, DeprecationWarning)
        C = A._v2_articles_article_id_update_description_put_serialize(
            article_id=article_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_update_description_put_with_http_info(
        self,
        article_id,
        description=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Update the Article Description\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param description: The description of the article\n        :type description: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_e, DeprecationWarning)
        C = A._v2_articles_article_id_update_description_put_serialize(
            article_id=article_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_update_description_put_without_preload_content(
        self,
        article_id,
        description=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Update the Article Description\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param description: The description of the article\n        :type description: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        warnings.warn(_e, DeprecationWarning)
        A = self._v2_articles_article_id_update_description_put_serialize(
            article_id=article_id,
            description=description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _B, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_update_description_put_serialize(
        B, article_id, description, _request_auth, _content_type, _headers, _host_index
    ):
        D = description
        C = article_id
        G = _A
        H = {}
        E = {}
        F = []
        A = _headers or {}
        I = []
        J = {}
        K = _A
        if C is not _A:
            E[_I] = C
        if D is not _A:
            F.append((_o, D))
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        L = [_G]
        return B.api_client.param_serialize(
            method=_O,
            resource_path="/v2/Articles/{articleId}/updateDescription",
            path_params=E,
            query_params=F,
            header_params=A,
            body=K,
            post_params=I,
            files=J,
            auth_settings=L,
            collection_formats=H,
            _host=G,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_version_version_number_delete(
        self,
        article_id,
        version_number,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Deletes an article version\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_f, DeprecationWarning)
        C = A._v2_articles_article_id_version_version_number_delete_serialize(
            article_id=article_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_version_version_number_delete_with_http_info(
        self,
        article_id,
        version_number,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Deletes an article version\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_f, DeprecationWarning)
        C = A._v2_articles_article_id_version_version_number_delete_serialize(
            article_id=article_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _B, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_version_version_number_delete_without_preload_content(
        self,
        article_id,
        version_number,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Deletes an article version\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        warnings.warn(_f, DeprecationWarning)
        A = self._v2_articles_article_id_version_version_number_delete_serialize(
            article_id=article_id,
            version_number=version_number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _B, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_version_version_number_delete_serialize(
        C,
        article_id,
        version_number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        E = version_number
        D = article_id
        F = _A
        G = {}
        A = {}
        H = []
        B = _headers or {}
        I = []
        J = {}
        K = _A
        if D is not _A:
            A[_I] = D
        if E is not _A:
            A[_W] = E
        if _E not in B:
            B[_E] = C.api_client.select_header_accept([_F])
        L = [_G]
        return C.api_client.param_serialize(
            method=_U,
            resource_path="/v2/Articles/{articleId}/version/{versionNumber}",
            path_params=A,
            query_params=H,
            header_params=B,
            body=K,
            post_params=I,
            files=J,
            auth_settings=L,
            collection_formats=G,
            _host=F,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_versions_get(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets all article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_g, DeprecationWarning)
        C = A._v2_articles_article_id_versions_get_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _S, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_versions_get_with_http_info(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets all article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_g, DeprecationWarning)
        C = A._v2_articles_article_id_versions_get_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _S, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_versions_get_without_preload_content(
        self,
        article_id,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets all article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        warnings.warn(_g, DeprecationWarning)
        A = self._v2_articles_article_id_versions_get_serialize(
            article_id=article_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _S, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_versions_get_serialize(
        B, article_id, _request_auth, _content_type, _headers, _host_index
    ):
        C = article_id
        E = _A
        F = {}
        D = {}
        G = []
        A = _headers or {}
        H = []
        I = {}
        J = _A
        if C is not _A:
            D[_I] = C
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        K = [_G]
        return B.api_client.param_serialize(
            method=_P,
            resource_path="/v2/Articles/{articleId}/versions",
            path_params=D,
            query_params=G,
            header_params=A,
            body=J,
            post_params=H,
            files=I,
            auth_settings=K,
            collection_formats=F,
            _host=E,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_article_id_versions_version_number_get(
        self,
        article_id,
        version_number,
        is_for_display=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets article by a version number\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_h, DeprecationWarning)
        C = A._v2_articles_article_id_versions_version_number_get_serialize(
            article_id=article_id,
            version_number=version_number,
            is_for_display=is_for_display,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _T, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_article_id_versions_version_number_get_with_http_info(
        self,
        article_id,
        version_number,
        is_for_display=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets article by a version number\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        warnings.warn(_h, DeprecationWarning)
        C = A._v2_articles_article_id_versions_version_number_get_serialize(
            article_id=article_id,
            version_number=version_number,
            is_for_display=is_for_display,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _T, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_article_id_versions_version_number_get_without_preload_content(
        self,
        article_id,
        version_number,
        is_for_display=_A,
        append_sas_token=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "(Deprecated) Gets article by a version number\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param version_number: Version number of the article (required)\n        :type version_number: int\n        :param is_for_display: Set this to true, if you are displaying the article to the end-user. If true, the content of snippets or variables appears in the article. Note: If the value is true, ensure that the article content is not passed for update article endpoints.\n        :type is_for_display: bool\n        :param append_sas_token: Set this to false to exclude appending SAS token for images/files\n        :type append_sas_token: bool\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        warnings.warn(_h, DeprecationWarning)
        A = self._v2_articles_article_id_versions_version_number_get_serialize(
            article_id=article_id,
            version_number=version_number,
            is_for_display=is_for_display,
            append_sas_token=append_sas_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _T, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_article_id_versions_version_number_get_serialize(
        D,
        article_id,
        version_number,
        is_for_display,
        append_sas_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        H = append_sas_token
        G = is_for_display
        F = version_number
        E = article_id
        I = _A
        J = {}
        A = {}
        B = []
        C = _headers or {}
        K = []
        L = {}
        M = _A
        if E is not _A:
            A[_I] = E
        if F is not _A:
            A[_W] = F
        if G is not _A:
            B.append((_Z, G))
        if H is not _A:
            B.append((_a, H))
        if _E not in C:
            C[_E] = D.api_client.select_header_accept([_F])
        N = [_G]
        return D.api_client.param_serialize(
            method=_P,
            resource_path="/v2/Articles/{articleId}/versions/{versionNumber}",
            path_params=A,
            query_params=B,
            header_params=C,
            body=M,
            post_params=K,
            files=L,
            auth_settings=N,
            collection_formats=J,
            _host=I,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_bulkcreate_post(
        self,
        create_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Adds multiple articles\n\n\n        :param create_article_request: \n        :type create_article_request: List[CreateArticleRequest]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkcreate_post_serialize(
            create_article_request=create_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _i, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_bulkcreate_post_with_http_info(
        self,
        create_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Adds multiple articles\n\n\n        :param create_article_request: \n        :type create_article_request: List[CreateArticleRequest]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkcreate_post_serialize(
            create_article_request=create_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _i, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_bulkcreate_post_without_preload_content(
        self,
        create_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Adds multiple articles\n\n\n        :param create_article_request: \n        :type create_article_request: List[CreateArticleRequest]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_bulkcreate_post_serialize(
            create_article_request=create_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _i, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_bulkcreate_post_serialize(
        B, create_article_request, _request_auth, _content_type, _headers, _host_index
    ):
        D = _content_type
        C = create_article_request
        G = _A
        H = {"CreateArticleRequest": ""}
        I = {}
        J = []
        A = _headers or {}
        K = []
        L = {}
        E = _A
        if C is not _A:
            E = C
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if D:
            A[_H] = D
        else:
            F = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if F is not _A:
                A[_H] = F
        M = [_G]
        return B.api_client.param_serialize(
            method=_V,
            resource_path="/v2/Articles/bulkcreate",
            path_params=I,
            query_params=J,
            header_params=A,
            body=E,
            post_params=K,
            files=L,
            auth_settings=M,
            collection_formats=H,
            _host=G,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_bulkdelete_article_versions_delete(
        self,
        article_id,
        lang_code,
        article_version_numbers,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Delete multiple article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param article_version_numbers: Array of article version numbers (required)\n        :type article_version_numbers: List[int]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkdelete_article_versions_delete_serialize(
            article_id=article_id,
            lang_code=lang_code,
            article_version_numbers=article_version_numbers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _j, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_bulkdelete_article_versions_delete_with_http_info(
        self,
        article_id,
        lang_code,
        article_version_numbers,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Delete multiple article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param article_version_numbers: Array of article version numbers (required)\n        :type article_version_numbers: List[int]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkdelete_article_versions_delete_serialize(
            article_id=article_id,
            lang_code=lang_code,
            article_version_numbers=article_version_numbers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _j, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_bulkdelete_article_versions_delete_without_preload_content(
        self,
        article_id,
        lang_code,
        article_version_numbers,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Delete multiple article versions\n\n\n        :param article_id: The ID of the article (required)\n        :type article_id: str\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param article_version_numbers: Array of article version numbers (required)\n        :type article_version_numbers: List[int]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_bulkdelete_article_versions_delete_serialize(
            article_id=article_id,
            lang_code=lang_code,
            article_version_numbers=article_version_numbers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _j, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_bulkdelete_article_versions_delete_serialize(
        C,
        article_id,
        lang_code,
        article_version_numbers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        G = "articleVersionNumbers"
        F = article_version_numbers
        E = lang_code
        D = article_id
        H = _A
        I = {G: "multi"}
        J = {}
        A = []
        B = _headers or {}
        K = []
        L = {}
        M = _A
        if D is not _A:
            A.append((_I, D))
        if E is not _A:
            A.append((_K, E))
        if F is not _A:
            A.append((G, F))
        if _E not in B:
            B[_E] = C.api_client.select_header_accept([_F])
        N = [_G]
        return C.api_client.param_serialize(
            method=_U,
            resource_path="/v2/Articles/bulkdelete-article-versions",
            path_params=J,
            query_params=A,
            header_params=B,
            body=M,
            post_params=K,
            files=L,
            auth_settings=N,
            collection_formats=I,
            _host=H,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_bulkdelete_delete(
        self,
        article_ids,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes multiple articles\n\n\n        :param article_ids: Array of article IDs (required)\n        :type article_ids: List[str]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkdelete_delete_serialize(
            article_ids=article_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _k, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_bulkdelete_delete_with_http_info(
        self,
        article_ids,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes multiple articles\n\n\n        :param article_ids: Array of article IDs (required)\n        :type article_ids: List[str]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkdelete_delete_serialize(
            article_ids=article_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _k, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_bulkdelete_delete_without_preload_content(
        self,
        article_ids,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Deletes multiple articles\n\n\n        :param article_ids: Array of article IDs (required)\n        :type article_ids: List[str]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_bulkdelete_delete_serialize(
            article_ids=article_ids,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _k, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_bulkdelete_delete_serialize(
        B, article_ids, _request_auth, _content_type, _headers, _host_index
    ):
        E = "articleIds"
        C = article_ids
        F = _A
        G = {E: "multi"}
        H = {}
        D = []
        A = _headers or {}
        I = []
        J = {}
        K = _A
        if C is not _A:
            D.append((E, C))
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        L = [_G]
        return B.api_client.param_serialize(
            method=_U,
            resource_path="/v2/Articles/bulkdelete",
            path_params=H,
            query_params=D,
            header_params=A,
            body=K,
            post_params=I,
            files=J,
            auth_settings=L,
            collection_formats=G,
            _host=F,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_bulkpublish_lang_code_post(
        self,
        lang_code,
        bulk_publish_article=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Publishes multiple articles\n\n\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param bulk_publish_article: \n        :type bulk_publish_article: List[BulkPublishArticle]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkpublish_lang_code_post_serialize(
            lang_code=lang_code,
            bulk_publish_article=bulk_publish_article,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_bulkpublish_lang_code_post_with_http_info(
        self,
        lang_code,
        bulk_publish_article=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Publishes multiple articles\n\n\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param bulk_publish_article: \n        :type bulk_publish_article: List[BulkPublishArticle]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkpublish_lang_code_post_serialize(
            lang_code=lang_code,
            bulk_publish_article=bulk_publish_article,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_bulkpublish_lang_code_post_without_preload_content(
        self,
        lang_code,
        bulk_publish_article=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Publishes multiple articles\n\n\n        :param lang_code: Language code of the article (required)\n        :type lang_code: str\n        :param bulk_publish_article: \n        :type bulk_publish_article: List[BulkPublishArticle]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_bulkpublish_lang_code_post_serialize(
            lang_code=lang_code,
            bulk_publish_article=bulk_publish_article,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _J, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_bulkpublish_lang_code_post_serialize(
        B,
        lang_code,
        bulk_publish_article,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ):
        E = _content_type
        D = bulk_publish_article
        C = lang_code
        I = _A
        J = {"BulkPublishArticle": ""}
        F = {}
        K = []
        A = _headers or {}
        L = []
        M = {}
        G = _A
        if C is not _A:
            F[_K] = C
        if D is not _A:
            G = D
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if E:
            A[_H] = E
        else:
            H = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if H is not _A:
                A[_H] = H
        N = [_G]
        return B.api_client.param_serialize(
            method=_V,
            resource_path="/v2/Articles/bulkpublish/{langCode}",
            path_params=F,
            query_params=K,
            header_params=A,
            body=G,
            post_params=L,
            files=M,
            auth_settings=N,
            collection_formats=J,
            _host=I,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_bulkupdate_put(
        self,
        bulk_update_article=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates multiple articles\n\n\n        :param bulk_update_article: \n        :type bulk_update_article: List[BulkUpdateArticle]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkupdate_put_serialize(
            bulk_update_article=bulk_update_article,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _l, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_bulkupdate_put_with_http_info(
        self,
        bulk_update_article=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates multiple articles\n\n\n        :param bulk_update_article: \n        :type bulk_update_article: List[BulkUpdateArticle]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_bulkupdate_put_serialize(
            bulk_update_article=bulk_update_article,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _l, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_bulkupdate_put_without_preload_content(
        self,
        bulk_update_article=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Updates multiple articles\n\n\n        :param bulk_update_article: \n        :type bulk_update_article: List[BulkUpdateArticle]\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_bulkupdate_put_serialize(
            bulk_update_article=bulk_update_article,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _l, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_bulkupdate_put_serialize(
        B, bulk_update_article, _request_auth, _content_type, _headers, _host_index
    ):
        D = _content_type
        C = bulk_update_article
        G = _A
        H = {"BulkUpdateArticle": ""}
        I = {}
        J = []
        A = _headers or {}
        K = []
        L = {}
        E = _A
        if C is not _A:
            E = C
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if D:
            A[_H] = D
        else:
            F = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if F is not _A:
                A[_H] = F
        M = [_G]
        return B.api_client.param_serialize(
            method=_O,
            resource_path="/v2/Articles/bulkupdate",
            path_params=I,
            query_params=J,
            header_params=A,
            body=E,
            post_params=K,
            files=L,
            auth_settings=M,
            collection_formats=H,
            _host=G,
            _request_auth=_request_auth,
        )

    @validate_call
    async def v2_articles_post(
        self,
        create_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Adds an article to an existing category\n\n\n        :param create_article_request: \n        :type create_article_request: CreateArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_post_serialize(
            create_article_request=create_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(
            response_data=B, response_types_map=D
        ).data

    @validate_call
    async def v2_articles_post_with_http_info(
        self,
        create_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Adds an article to an existing category\n\n\n        :param create_article_request: \n        :type create_article_request: CreateArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self
        C = A._v2_articles_post_serialize(
            create_article_request=create_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        D = {_C: _J, _D: _B}
        B = await A.api_client.call_api(*C, _request_timeout=_request_timeout)
        await B.read()
        return A.api_client.response_deserialize(response_data=B, response_types_map=D)

    @validate_call
    async def v2_articles_post_without_preload_content(
        self,
        create_article_request=_A,
        _request_timeout=_A,
        _request_auth=_A,
        _content_type=_A,
        _headers=_A,
        _host_index=0,
    ):
        "Adds an article to an existing category\n\n\n        :param create_article_request: \n        :type create_article_request: CreateArticleRequest\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :type _request_timeout: int, tuple(int, int), optional\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the\n                              authentication in the spec for a single request.\n        :type _request_auth: dict, optional\n        :param _content_type: force content-type for the request.\n        :type _content_type: str, Optional\n        :param _headers: set to override the headers for a single\n                         request; this effectively ignores the headers\n                         in the spec for a single request.\n        :type _headers: dict, optional\n        :param _host_index: set to override the host_index for a single\n                            request; this effectively ignores the host_index\n                            in the spec for a single request.\n        :type _host_index: int, optional\n        :return: Returns the result object.\n"
        A = self._v2_articles_post_serialize(
            create_article_request=create_article_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )
        C = {_C: _J, _D: _B}
        B = await self.api_client.call_api(*A, _request_timeout=_request_timeout)
        return B.response

    def _v2_articles_post_serialize(
        B, create_article_request, _request_auth, _content_type, _headers, _host_index
    ):
        D = _content_type
        C = create_article_request
        G = _A
        H = {}
        I = {}
        J = []
        A = _headers or {}
        K = []
        L = {}
        E = _A
        if C is not _A:
            E = C
        if _E not in A:
            A[_E] = B.api_client.select_header_accept([_F])
        if D:
            A[_H] = D
        else:
            F = B.api_client.select_header_content_type([_L, _F, _M, _N])
            if F is not _A:
                A[_H] = F
        M = [_G]
        return B.api_client.param_serialize(
            method=_V,
            resource_path="/v2/Articles",
            path_params=I,
            query_params=J,
            header_params=A,
            body=E,
            post_params=K,
            files=L,
            auth_settings=M,
            collection_formats=H,
            _host=G,
            _request_auth=_request_auth,
        )
